{"version":3,"file":"main.0a3b8647247bbf1cfe61.hot-update.js","sources":["webpack:///./src/stories/atom/Avatar.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react/types-6-0\\\";\\n\\nimport { Avatar } from \\\"../../components/Avatar\\\";\\nimport {\\n  AvatarProps,\\n  defaultAvatarProps as avatarDefaultProps,\\n  avatarSize,\\n  AvatarSizeType,\\n} from \\\"../../components/Avatar\\\";\\nimport { styled } from \\\"stitches.config\\\";\\n\\nexport default {\\n  title: \\\"Atom/Avatar\\\",\\n  component: Avatar,\\n} as Meta;\\n\\nconst Template: Story<AvatarProps> = (props) => <Avatar {...props} />;\\nconst List: Story<AvatarProps> = (props) => {\\n  return (\\n    <Wrapper\\n      css={{\\n        placeItems: \\\"end\\\",\\n        equallyGridColumn: Object.keys(avatarSize).length,\\n      }}\\n    >\\n      {Object.keys(avatarSize).map((size) => (\\n        <Avatar\\n          id={`avatar--${size}`}\\n          key={size}\\n          size={size as AvatarSizeType}\\n          {...props}\\n        />\\n      ))}\\n    </Wrapper>\\n  );\\n};\\n\\nexport const WithImage = Template.bind({});\\nexport const WithoutImage = Template.bind({});\\nexport const onClickImage = Template.bind({});\\nexport const AvatarList = List.bind({});\\n\\nWithImage.args = {\\n  ...avatarDefaultProps,\\n  src: \\\"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\\\",\\n};\\n\\nWithoutImage.args = {\\n  ...avatarDefaultProps,\\n};\\n\\nonClickImage.args = {\\n  ...avatarDefaultProps,\\n  onClick,\\n};\\n\\nAvatarList.args = {\\n  src: \\\"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\\\",\\n};\\n\\nconst Wrapper = styled(\\\"div\\\");\\n\\nfunction onClick<T extends React.MouseEvent<HTMLSpanElement>>(event: T) {\\n  return alert((event.target as HTMLElement).id);\\n}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"WithImage\":{\"startLoc\":{\"col\":37,\"line\":18},\"endLoc\":{\"col\":69,\"line\":18},\"startBody\":{\"col\":37,\"line\":18},\"endBody\":{\"col\":69,\"line\":18}},\"WithoutImage\":{\"startLoc\":{\"col\":37,\"line\":18},\"endLoc\":{\"col\":69,\"line\":18},\"startBody\":{\"col\":37,\"line\":18},\"endBody\":{\"col\":69,\"line\":18}},\"onClickImage\":{\"startLoc\":{\"col\":37,\"line\":18},\"endLoc\":{\"col\":69,\"line\":18},\"startBody\":{\"col\":37,\"line\":18},\"endBody\":{\"col\":69,\"line\":18}},\"AvatarList\":{\"startLoc\":{\"col\":33,\"line\":19},\"endLoc\":{\"col\":1,\"line\":37},\"startBody\":{\"col\":33,\"line\":19},\"endBody\":{\"col\":1,\"line\":37}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react/types-6-0\";\n\nimport { Avatar } from \"../../components/Avatar\";\nimport {\n  AvatarProps,\n  defaultAvatarProps as avatarDefaultProps,\n  avatarSize,\n  AvatarSizeType,\n} from \"../../components/Avatar\";\nimport { styled } from \"stitches.config\";\n\nexport default {\n  title: \"Atom/Avatar\",\n  component: Avatar,\n} as Meta;\n\nconst Template: Story<AvatarProps> = (props) => <Avatar {...props} />;\nconst List: Story<AvatarProps> = (props) => {\n  return (\n    <Wrapper\n      css={{\n        placeItems: \"end\",\n        equallyGridColumn: Object.keys(avatarSize).length,\n      }}\n    >\n      {Object.keys(avatarSize).map((size) => (\n        <Avatar\n          id={`avatar--${size}`}\n          key={size}\n          size={size as AvatarSizeType}\n          {...props}\n        />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport const WithImage = Template.bind({});;\nexport const WithoutImage = Template.bind({});;\nexport const onClickImage = Template.bind({});;\nexport const AvatarList = List.bind({});\n\nWithImage.args = {\n  ...avatarDefaultProps,\n  src: \"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\",\n};\n\nWithoutImage.args = {\n  ...avatarDefaultProps,\n};\n\nonClickImage.args = {\n  ...avatarDefaultProps,\n  onClick,\n};\n\nAvatarList.args = {\n  src: \"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\",\n};\n\nconst Wrapper = styled(\"div\");\n\nfunction onClick<T extends React.MouseEvent<HTMLSpanElement>>(event: T) {\n  return alert((event.target as HTMLElement).id);\n}\n\n\n\nWithImage.parameters = { storySource: { source: \"(props) => <Avatar {...props} />\" }, ...WithImage.parameters };\nWithoutImage.parameters = { storySource: { source: \"(props) => <Avatar {...props} />\" }, ...WithoutImage.parameters };\nonClickImage.parameters = { storySource: { source: \"(props) => <Avatar {...props} />\" }, ...onClickImage.parameters };\nAvatarList.parameters = { storySource: { source: \"(props) => {\\n  return (\\n    <Wrapper\\n      css={{\\n        placeItems: \\\"end\\\",\\n        equallyGridColumn: Object.keys(avatarSize).length,\\n      }}\\n    >\\n      {Object.keys(avatarSize).map((size) => (\\n        <Avatar\\n          id={`avatar--${size}`}\\n          key={size}\\n          size={size as AvatarSizeType}\\n          {...props}\\n        />\\n      ))}\\n    </Wrapper>\\n  );\\n}\" }, ...AvatarList.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAMA;;AAEA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AAEA;AAHA;AADA;AANA;AAgBA;AACA;AAnBA;AAoBA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAKA;AAIA;AAEA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}